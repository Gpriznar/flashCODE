[{"python" :
    [{"Term": "Comment (#)", "Definition": "used for the purpose of in-code documentation"},
    {"Term": "Create a Variable", "Definition": "Python has no command for declaring a variable. A variable is created the moment you first assign a value to it using an equal sign.", "Example": "name = John"},
    {"Term": "Variable Name Rules", "Definition": "Must start with a letter or the underscore character, can't start with a number, can only contain alpha-numeric characters and underscores, are case-sensitive"},
    {"Term": "Output Variables", "Definition": "The Python print statement is often used to output variables. To combine both text and a variable, Python uses the + character", "Example": "Print('Text here' + variableName)"},
    {"Term": "Int", "Definition": "Int, or integer, is a whole number, positive or negative, without decimals, of unlimited length", "Example":"1, -75, 674876"},
    {"Term": "Float", "Definition": "Float, or 'floating point number' is a number, positive or negative, containing one or more decimals", "Example": "1.5, -3.7"},
    {"Term": "Complex Number", "Definition": "Complex numbers are written with a 'j' as the imaginary part", "Example":"7j, -7j"},
    {"Term": "String", "Definition": "String literals in python are surrounded by either single quotation marks, or double quotation marks.Strings can be output to screen using the print function", "Example": "Print('Hello World')"},
    {"Term": "Input()", "Definition": "Can be used with a string to ask a user for input"},
    {"Term": "Addition Operator", "Definition": "(+) used to add two numbers together", "Example": "1 + 2 = 3"},
    {"Term": "Subtraction Operatior", "Definition": "(-) used to subract a number from another", "Example": "3 - 2 = 1"},
    {"Term": "Multiplication Operator", "Definition": "(*) used to multiply two numbers", "Example": "3 * 2 = 6"},
    {"Term": "Division Operator", "Definition": "(/) used to divide a number by another", "Example": "6 / 2 = 3"},
    {"Term": "Modulus Operator", "Definition": "(%) returns the remainder after division is completed", "Example": "7 % 2 = 1"},
    {"Term": "Equal", "Definition": " (==) Comparison operator used when two Term have the same value", "Example": "3 == 3 , x == y"},
    {"Term": "Not equal", "Definition": "(!=) Comparison operator used when two Term do not have the same value", "Example": "3 != 2 , x != y"},
    {"Term": ">", "Definition": "Greater-than comparison operator that says one value is greater than another", "Example": "3 > 2 , x > y"},
    {"Term": "<", "Definition": "Less-than comparison operator that says one value is less than the other", "Example": "1 < 3 , x < y"},
    {"Term": ">=", "Definition": "Greater-then or Equal-to operator says one value is greater than OR equal-to another", "Example": "10 >= 3, 3 >= 3"},
    {"Term": "<=", "Definition": "Less-than or Equal-to operator says one value is less than OR equal to the other", "Example": "3 <= 10 , 3 <= 3"},
    {"Term": "Logical Operators", "Definition": "Logical operators are used to combine conditional statements"},
    {"Term": "and", "Definition": "Logical operator that returns True if both statements are true", "Example": "x < 5 and x < 10"},
    {"Term": "or", "Definition": "Logical operator that returns True if one of the statements is true", "Example": "x < 5 or x < 4"},
    {"Term": "not", "Definition": "Logical operator that reverses the result. Returns False if the result is true", "Example": "not(x < 5 and x < 10)"},
    {"Term": "Identity Operators", "Definition": "used to compare the objects, not if they are equal, but if they are actually the same object, with the same memory location"},
    {"Term": "is", "Definition": "Identity operator that returns true if both variables are the same object", "Example": "x is y = True"},
    {"Term": "is not", "Definition": "Identity operator that returns true if both variables are not the same object", "Example": "x is not y = True"},
    {"Term": "Membership Operators", "Definition": "test if a sequence is presented in an object"},
    {"Term": "in", "Definition": "Membership operator that returns True if a sequence with the specified value is present in the object"},
    {"Term": "not in", "Definition": "Membership operator that returns True if a sequence with the specified value is not present in the object"},
    {"Term": "List", "Definition": "a collection which is ordered and changeable. In Python lists are written with square brackets", "Example": "thislist = ['apple', 'banana', 'cherry']"},
    {"Term": "Loop Through a List", "Definition": "You can loop through each list item by using a for loop", "Example": "for x in thislist:"},
    {"Term": "Check if Item Exists in List", "Definition": "use the in keyword", "Example": "if 'apple' in thislist: return True"},
    {"Term": "len()", "Definition": "Used to determine how many items a list has", "Example": "print(len(thislist))"},
    {"Term": "append()", "Definition": "used to add an item to the end of the list", "Example": "thislist.append('orange')"},
    {"Term": "insert()", "Definition": "used to add an item at the specified index", "Example": "thislist.insert(1, 'orange')"},
    {"Term": "remove()", "Definition": "Removes the item with the specified value", "Example": "thislist.remove('banana')"},
    {"Term": "pop()", "Definition": "removes the specified index, (or the last item if index is not specified)", "Example": "thislist.pop()"},
    {"Term": "del", "Definition": "removes the specified index or a complete list", "Example": "del thislist[0] or del thislist"},
    {"Term": "clear()", "Definition": "Removes all the elements from the list but empty list itself still remains", "Example": "thislist.clear()"},
    {"Term": "list()", "Definition": "Used to make a new list", "Example": "thislist = list(('apple', 'banana', 'cherry'))"},
    {"Term": "reverse()", "Definition": "Reverses the order of the list", "Example": "thislist.reverse()"},
    {"Term": "sort()", "Definition": "Sorts the list alphabetically", "Example": "thislist.sort()"},
    {"Term": "Elif", "Definition": "Used in If statements: if the previous conditions were not true, then try this condition"},
    {"Term": "Else", "Definition": "Used in If statements to catch anything which isn't caught by the preceding conditions"},
    {"Term": "And", "Definition": "a logical operator used to combine conditional statements", "Example": "if a > b and c > a: print('True')"},
    {"Term": "While ", "Definition": "can execute a set of statements as long as a condition is true", "Example": "while i < 6: print(i)"},
    {"Term": "Break", "Definition": "used in While loop, can stop the loop even if the while condition is true"},
    {"Term": "Continue", "Definition": "used in While loop, can stop the current iteration, and continue with the next"},
    {"Term": "For", "Definition": "loop is used for iterating (execute a set of statements, once for each item in a list) over a sequence (that is either a list, a tuple, a dictionary, a set, or a string)"},
    {"Term": "Range", "Definition": "loops through a set of code starting from 0 by default, incrementing by 1 (by default), and ending at a specified number.", "Example": "for x in range(2, 6): Print(x)"},
    {"Term": "Nested Loop", "Definition": "A nested loop is a loop inside a loop. The 'inner loop' will be executed one time for each iteration of the 'outer loop'"},
    {"Term": "Function", "Definition": "A function is a block of code which only runs when it is called. You can pass data, known as parameters, into a function. It can return data as a result."},
    {"Term": "Parameters", "Definition": "Information can be passed to functions as parameter. Parameters are specified after the function name, inside the parentheses. You can add as many parameters as you want, just separate them with a comma."}]},
{"CSS" :
    [{"Term": "CSS", "Definition": "CSS stands for Cascading Style Sheets. CSS describes how HTML elements are to be displayed on screen, paper, or in other media"},
    {"Term": "Selector", "Definition": "points to the HTML element you want to style", "Example": "HTMLselector {textcolor:blue;}"},
    {"Term": "Declaration", "Definition": "includes a CSS property name and a value, separated by a colon. A CSS declaration always ends with a semicolon, and declaration blocks are surrounded by curly braces.", "Example": "h1 {declaration:value;}"},
    {"Term": "id Selector", "Definition": " (#) The id selector uses the id attribute of an HTML element to select a specific element. The id of an element should be unique within a page, so the id selector is used to select one unique element", "Example": "#idgoeshere {color: red;}"},
    {"Term": "class Selector", "Definition": "The class selector selects elements with a specific class attribute. To select elements with a specific class, write a period (.) character, followed by the name of the class.", "Example": ".classname{color:red;}"},
    {"Term": "Comment", "Definition": "(/* */) Comments are used to explain the code, and may help when you edit the source code at a later date. Comments are ignored by browsers"},
    {"Term": "background-color:", "Definition": "set the background color for HTML elements"},
    {"Term": "text-color:", "Definition": "set the text-color for an HTML element"},
    {"Term": "border:", "Definition": "sets properties of border lines for HTML elements"},
    {"Term": "RGB Value", "Definition": "a color can be specified as an RGB value, using this formula: rgb(red, green, blue). Each parameter (red, green, and blue) defines the intensity of the color between 0 and 255."},
    {"Term": "HEX Value", "Definition": "In HTML, a color can be specified using a hexadecimal value in the form: #rrggbb"},
    {"Term": "HSL Value", "Definition": " a color can be specified using hue, saturation, and lightness (HSL) in the form: hsl(hue, saturation, lightness)"},
    {"Term": "background-image:", "Definition": "specifies an image to use as the background of an element. By default, the image is repeated so it covers the entire element", "Example": "body {background-image: url('imagename.gif');}"},
    {"Term": "background-repeat: repeat-x;", "Definition": "used to repeat background image only horizontally"},
    {"Term": "background-repeat: no-repeat;", "Definition": "sets the background image so that it only is displayed once (not repeated)"},
    {"Term": "background-attachment:", "Definition": "Sets whether a background image is fixed or scrolls with the rest of the page"},
    {"Term": "background-origin:", "Definition": "Specifies where the background image(s) is/are positioned"},
    {"Term": "background-position", "Definition": "Sets the starting position of a background image"},
    {"Term": "background-repeat", "Definition": "Sets how a background image will be repeated"},
    {"Term": "background-size", "Definition": "Specifies the size of the background image(s)"},
    {"Term": "border-bottom", "Definition": "Sets all the bottom border properties in one declaration. Each border side has their own declaration (top, bottom, left, right)"},
    {"Term": "border-radius", "Definition": "Sets all the four border-radius properties for rounded corners"},
    {"Term": "border-width", "Definition": "Sets the width of the four borders (can be used on seperate border sides as well)"},
    {"Term": "margin", "Definition": "used to create space around elements, outside of any defined borders"},
    {"Term": "auto margin", "Definition": "You can set the margin property to auto to horizontally center the element within its container"},
    {"Term": "padding", "Definition": "used to generate space around an element's content, inside of any defined borders"},
    {"Term": "height:", "Definition": "sets the height of an element"},
    {"Term": "width", "Definition": "sets the width of an element"},
    {"Term": "max-height and max-width", "Definition": "sets the maximum height or width that an element can be"},
    {"Term": "min-height and min-width", "Definition": "Sets the minimum height or width of an element"},
    {"Term": "CSS Box Model", "Definition": "The CSS box model is essentially a box that wraps around every HTML element. It consists of: margins, borders, padding, and the actual content"},
    {"Term": "Outline", "Definition": "An outline is a line that is drawn around elements, OUTSIDE the borders, to make the element 'stand out'.Style, Color, Width, and Offset properties can be assigned to it. "},
    {"Term": "color", "Definition": "Sets the color of text"},
    {"Term": "direction", "Definition": "Specifies the text direction/writing direction"},
    {"Term": "letter-spacing", "Definition": "Increases or decreases the space between characters in a text"},
    {"Term": "text-align", "Definition": "Specifies the horizontal alignment of text"},
    {"Term": "text-overflow", "Definition": "Specifies how overflowed content that is not displayed should be signaled to the user"},
    {"Term": "vertical-align", "Definition": "Sets the vertical alignment of an element"},
    {"Term": "Font Families", "Definition": "generic family - a group of font families with a similar look (like 'Serif' or 'Monospace'). font family - a specific font family (like 'Times New Roman' or 'Arial')"},
    {"Term": "Font", "Definition": "sets font properties. Properties can include: -family, -size, -style, -variant, and -weight"},
    {"Term": "Links", "Definition": "have four states: link, visited, hover and active. Each state can be styled using any CSS property"}]},
{"HTML" :
    [{"Term": "HTML", "Definition": "Hyper Text Markup Language"},
    {"Term": "HTML element", "Definition": "HTML elements are the building blocks of HTML pages"},
    {"Term": "HTML tag", "Definition": "HTML elements are represented by tags"},
    {"Term": "<p>Your text here</p>", "Definition": "Everything between the opening/closing tags is what appears on screen"},
    {"Term": "<html>", "Definition": "Root element of an HTML page, everything is contained within these tags"},
    {"Term": "<head>", "Definition": "The element that contains meta info about the document"},
    {"Term": "<title>", "Definiton": "Element that specifies a title for the document"},
    {"Term": "<body>", "Definition": "Element containing the visible page content"},
    {"Term": "<h1>", "Definition": "Largest heading element you can create"},
    {"Term": "<h6>", "Definition": "Smallest heading element you can create"},
    {"Term": "<p>", "Definition": "HTML tag used to create a paragraph element, also called the opening tag"},
    {"Term": "</p>", "Definition": "Closing tag to the paragraph element - requires the / to work"},
    {"Term": "<br>", "Definiton": "Line break - if you want a line break without starting a new paragraph"},
    {"Term": "<a>", "Definition": "HTML link element"},
    {"Term": "href='#'", "Defintion": "href is the link's destination"},
    {"Term": "<img>", "Definiton": "tag for an HTML image"},
    {"Term": "src='#'", "Definition": "the location of the image to display"},
    {"Term": "alt", "Definiton": "attribute specifies alternative text to be used when an image cannot be displayed"},
    {"Term": "<button>", "Definition": "tag to create a button element"},
    {"Term": "<ul>", "Definition": "tag to create an unordered list element"},
    {"Term": "<ol>", "Definition": "tag to create an ordered list element"},
    {"Term": "<li>", "Defintion": "tag to create a list element inside either ul or ol elements"},
    {"Term": "id", "Definition": "Specifies a unique id for an element"},
    {"Term": "<b>", "Definiton": "Bolds text"},
    {"Term": "<i>", "Definiton": "Italices text"},
    {"Term": "<em>", "Definition": "Emphasized text"},
    {"Term": "<!-- -->", "Definition": "HTML syntax for commenting"}]},
{"Command Line" :
    [{"Term": "pwd", "Definition": "print working directory"},
    {"Term": "hostname", "Definition": "my computer's network name"},
    {"Term": "mkdir", "Definition": "make directory"},
    {"Term": "cd", "Definition": "change directory"},
    {"Term": "cd ..", "Definition": "navigates up one directory"},
    {"Term": "ls", "Definition": "list directory"},
    {"Term": "ls -a", "Definition": "lists all contents in the working directory, including hidden files and directories"},
    {"Term": "ls -l", "Definition": "lists all contents of a directory in long format"},
    {"Term": "ls -t", "Definition": "orders files and directories by the time they were last modified"},
    {"Term": "rmdir", "Definition": "remove directory"},
    {"Term": "pushd", "Definition": "push directory"},
    {"Term": "popd", "Definition": "pop directory"},
    {"Term": "cp", "Definition": "copy a file or directory"},
    {"Term": "mv", "Definition": "move a file or directory"},
    {"Term": "less", "Definition": "page through a file"},
    {"Term": "cat", "Definition": "print the whole file"},
    {"Term": "xargs", "Definition": "execute arguments"},
    {"Term": "find", "Definition": "find files"},
    {"Term": "grep", "Definition": "find things inside files", "Example": "$ grep 'Mount' mountains.txt"},
    {"Term": "grep -i", "Definition": "enables the command to be case insensitive"},
    {"Term": "grep -r", "Definition": "searches all files in a directory and outputs filenames and lines containing matched results"},
    {"Term": "grep -rl", "Definition": "searches all files in a directory and outputs only filenames with matched results"},
    {"Term": "man", "Definition": "read a manual page"},
    {"Term": "apropos", "Definition": "find what manual page is appropriate"},
    {"Term": "env", "Definition": "look at your environment"},
    {"Term": "echo", "Definition": "print some arguments"},
    {"Term": "export", "Definition": "export/set a new environment variable"},
    {"Term": "exit", "Definition": "exit the shell"},
    {"Term": "sudo", "Definition": "become super user root"},
    {"Term": ">", "Definition": "takes the standard output of the command on the left, and redirects it to the file on the right", "Example": "$ cat oceans.txt > continents.txt"},
    {"Term": ">>", "Definition": "takes the standard output of the command on the left and appends (adds) it to the file on the right", "Example": "$ cat glaciers.txt >> rivers.txt"},
    {"Term": "<", "Definition": "takes the standard input from the file on the right and inputs it into the program on the left", "Example": "$ cat < lakes.txt"},
    {"Term": "~/.bash_profile", "Definition": "the name of file used to store environment settings"},
    {"Term": "alias", "Definition": "allows you to create keyboard shortcuts, or aliases, for commonly used commands", "Example": "alias pd='pwd'"},
    {"Term": "*", "Definition": "selects all of the files in the current directory"},
    {"Term": "home", "Definition": "an environment variable that displays the path of the home directory"},
    {"Term": "path", "Definition": "an environment variable that stores a list of directories separated by a colon"},
    {"Term": "rm", "Definition": "deletes files"},
    {"Term": "rm -r", "Definition": "deletes a directory and all of its child directories"},
    {"Term": "sort", "Definition": "takes a filename or standard input and orders each line alphabetically, printing it to standard output"},
    {"Term": "source", "Definition": "activates the changes in ~/.bash_profile for the current session"},
    {"Term": "touch", "Definition": "creates a new file inside the working directory"}
    {"Term": "uniq", "Definition": "takes a filename or standard input and prints out every line, removing any exact duplicates"}]},
{"Javascript" : 
    [{"Term":"array", "Definition": "an object used to store multiple values in a single variable", "Example": "let array = [1, 2, 3, 4, 5]"},
    {"Term":"array.length", "Definition": "sets or returns the number of elements in an array"},
    {"Term":"concat()", "Definition": "joins two or more arrays, and returns a copy of the joined arrays", "Example": "let array3 = array1.concat(array2)"},
    {"Term":"filter()", "Definition": "creates a new array with every element in an array that pass a test", "Example": "array.filter(function())"},
    {"Term":"findIndex()", "Definition": "returns the index of the first element in an array that pass a test", "Example": "array.findIndex(function())"},
    {"Term":"forEach()", "Definition": "calls a function for each array element", "Example": "array.forEach(function())"},
    {"Term":"indexOf", "Definition": "search the array for an element and returns its position", "Example": "array.indexOf(item)"},
    {"Term":"join()", "Definition": "joins all elements of an array into a string", "Example": "array.join(separator)"},
    {"Term":"map()", "Definition": "creates a new array with the result of calling a function for each array element", "Example": "array.map(function())"},
    {"Term":"pop()", "Definition": "removes the last element of an array, and returns that element", "Example": "array.pop()"},
    {"Term":"push()", "Definition": "adds new elements to the end of an array, and returns the new length", "Example": "array.push(items)"},
    {"Term":"reverse()", "Definition": "reverses the order of the elements in an array", "Example": "array.reverse()"},
    {"Term":"slice()", "Definition": "selects a part of an array, and returns the new array", "Example": "array.slice(start, end)"},
    {"Term":"splice()", "Definition": "adds/Removes elements from an array", "Example": "array.splice(index)"},
    {"Term":"boolean()", "Definition": "function used to find out if an expression is true", "Example": "boolean(10 > 9)  // returns true"},
    {"Term":"+", "Definition": "used for addition OR to concatenate strings", "Example": "x = y + 2 OR text3 = text1 + text2"},
    {"Term":"+=", "Definition": "used to add value to a variable OR to concatenate strings", "Example": "x += y OR text1 += text2"},
    {"Term":"-", "Definition": "used for subtraction", "Example": "x = y - 2"},
    {"Term":"*", "Definition": "used for multiplication", "Example": "x = y * 2"},
    {"Term":"/", "Definition": "used for division", "Example": "x = y / 2"},
    {"Term":"%", "Definition": "modulus(division remainder)", "Example": " x - y % 2"},
    {"Term":"==", "Definition": "equals to", "Example": "x == y"},
    {"Term":"!=", "Definition": "not equal", "Example": "x != y"},
    {"Term":">", "Definition": "greater than", "Example": "x > y"},
    {"Term":"<", "Definition": "less than", "Example": "x < y"},
    {"Term":">=", "Definition": "greater than or equal to", "Example": "x >= y"},
    {"Term":"<=", "Definition": "less than or equal to", "Example": "x <= y"},
    {"Term":"&&", "Definition": "and", "Example": "x < 10 && y > 1"},
    {"Term":"break", "Definition": "exits a switch or a loop"},
    {"Term":"for", "Definition": "loops through a block of code a number of times", "Example": "for (i = 0; i < 5; i++)"},
    {"Term":"while", "Definition": "loops through a block of code while a specified condition is true"},
    {"Term":"function", "Definition": "declares a function", "Example": "myFunction()"},
    {"Term":"if", "Definition": "used to specify a block of code to be executed if a specified condition is true", "Example": "if (condition)"},
    {"Term":"else if", "Definition": "used to specify a new condition to test if the first condition is false", "Example": "else if (condition2)"},
    {"Term":"else", "Definition": "used to specify a block of code to be executed if the same condition is false"},
    {"Term":"let", "Definition": "declares a variable", "Example": "let name = 'John'"},
    {"Term":"return", "Definition": "stops the execution of a function and returns a value from that function", "Example": "return x + y"},
    {"Term":"split()", "Definition": "splits a string into an array of substrings", "Example": "string.split(separator)"},
    {"Term":"toLowerCase()", "Definition": "converts a string to lowercase letters", "Example": "string.toLowerCase()"},
    {"Term":"toUpperCase()", "Definition": "converts a string to uppercase letters", "Example": "string.toUpperCase()"},
    {"Term":"toString()", "Definition": "returns the value of a string object", "Example": "object.toString()"},
    {"Term":"console.log()", "Definition": "outputs a message to the console", "Example": "console.log('Hello World')"},
    {"Term":"addEventListener", "Definition": "attaches an event handler to the document", "Example": "document.addEventListener('click', function(){})"},
    {"Term":"createElement()", "Definition": "creates an Element node", "Example": "var btn = document.createElement('BUTTON')"},
    {"Term":"getElementById()", "Definition": "returns the element that has the ID attribute with the specified value", "Example": "document.getElementById('demo')"},
    {"Term":"getElementsByClassName()", "Definition": "returns a NodeList containing all elements with the specified class name", "Example": "var x = document.getElementsByClassName('example')"},
    {"Term":"getElementsByName()", "Definition": "returns a NodeList containing all elements with a specified name", "Example": "var x = document.getElementsByName('name')"},
    {"Term":"getElementsByTagName()", "Definition": "returns a NodeList containing all elements with the specified tag name", "Example": "var x = document.getElementsByTagName('LI')"},
    {"Term":"querySelector()", "Definition": "returns the first element that matches a specified CSS selector(s) in the document", "Example": "document.querySelector('.example')"},
    {"Term":"querySelectorAll()", "Definition": "returns a static NodeList containing all elements that matches a specified CSS selector(s) in the document", "Example": "var x = document.querySelectorAll('.example')"},
    {"Term":"appendChild()", "Definition": "adds a new child node, to an element, as the last child node", "Example": "node.appendChild(node)"},
    {"Term":"innerHTML", "Definition": "sets or returns the content of an element", "Example": "infoUL.innerHTML = 'Paragraph changed!'"}]}]
